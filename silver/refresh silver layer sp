-- PROCEDURE: silver.refresh_silver_layer()

-- DROP PROCEDURE IF EXISTS silver.refresh_silver_layer();

CREATE OR REPLACE PROCEDURE silver.refresh_silver_layer(
	)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
    v_start_time TIMESTAMP := NOW(); -- procedure start time initialized to current time
    v_end_time TIMESTAMP := NOW(); -- procedure start time
    v_batch_start_time TIMESTAMP; -- Declares a numeric variable for currency
    v_batch_end_time TIMESTAMP; -- Declares a date variable that cannot be null

BEGIN
  RAISE NOTICE 'Start Time; %', v_start_time;
  RAISE NOTICE '===============================================';
  RAISE NOTICE 'Refreshing the Silver Layer';
  RAISE NOTICE '===============================================';

  RAISE NOTICE 'Batch start time: %', NOW();
  RAISE NOTICE '>>> Truncating Table: silver.crm_cust_info';

  TRUNCATE TABLE silver.crm_cust_info;
  RAISE NOTICE '>>> Inserting records into silver.crm_cust_info';
		
	INSERT INTO silver.crm_cust_info(
	cst_id,
	cst_key,
	cst_firstname, 
	cst_lastname,
	cst_marital_status,
	cst_gndr,
	cst_create_date)
	
	select
	CAST(cst_id AS INT) AS cst_id,
	cst_key,
	TRIM(cst_firstname) AS cst_firstname,
	TRIM(cst_lastname) AS cst_lastname,
	CASE WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
		 WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
		 ELSE 'Unknown'
	END as cst_marital_status,
	CASE 
		 WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
		 WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
		 ELSE 'Unknown'
	END as cst_gndr,
	CAST(cst_create_date AS DATE)
	from
	(SELECT *,
	row_number() over(partition by cst_id order by cast(cst_create_date as date) DESC) as rnk
	FROM bronze.crm_cust_info) x
	where rnk =  1;
  RAISE NOTICE 'Batch end time: %', now();

  RAISE NOTICE 'Batch start time: %' ,now();
  RAISE NOTICE '>>> Inserting records into silver.crm_cust_info';
  RAISE NOTICE '>>> Truncating Table: silver.crm_prd_info';
  TRUNCATE TABLE silver.crm_prd_info;
  RAISE NOTICE '>>> Inserting records into silver.crm_prd_info';

	INSERT INTO silver.crm_prd_info(
	prd_id, 
	prd_key, 
	cat_id, 
	prd_nm, 
	prd_cost, 
	prd_line, 
	prd_start_dt, 
	prd_end_dt)
	
	SELECT 
		CAST(prd_id as int) as prd_id,
		SUBSTRING(prd_key,7,LENGTH(prd_key)) AS prd_key,
		Replace(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
		TRIM(prd_nm) AS prd_nm, 
		COALESCE(CAST(prd_cost AS int),0) AS prd_cost,
		CASE UPPER(TRIM(prd_line))
			WHEN  'M' THEN 'Mountain'
			WHEN  'S' THEN 'Other Sales'
			WHEN  'R' THEN 'Road'
			WHEN  'T' THEN 'Touring'
			ELSE 'n/a'
		end as prd_line,
		CAST(prd_start_dt as date) as prd_start_dt, 
		LEAD(CAST(prd_start_dt as date)) over(partition by prd_key order by cast(prd_start_dt as date))-1 as prd_end_dt
		FROM bronze.crm_prd_info;

  RAISE NOTICE 'Batch end time: %', now();

  RAISE NOTICE 'Batch start time: %', now();
  RAISE NOTICE '>>> Truncating Table: silver.crm_sales_details';
  TRUNCATE TABLE silver.crm_sales_details;
  RAISE NOTICE '>>> Inserting records into silver.crm_sales_details';

		INSERT INTO silver.crm_sales_details(
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		sls_order_dt,
		sls_ship_dt,
		sls_due_dt,
		sls_sales,
		sls_quantity, 
		sls_price
		)
		
		SELECT 
		sls_ord_num,
		sls_prd_key,
		cast(sls_cust_id as int) sls_cust_id,
		CASE WHEN CAST(sls_order_dt AS INT) = 0 OR LENGTH(sls_order_dt) !=8 THEN NULL
			ELSE CAST(sls_order_dt AS DATE)
		END AS sls_order_dt,
		CASE WHEN CAST(sls_ship_dt AS INT) = 0 OR LENGTH(sls_ship_dt) !=8 THEN NULL
			ELSE CAST(sls_ship_dt AS DATE)
		END AS sls_ship_dt,
		CASE WHEN CAST(sls_due_dt AS INT) = 0 OR LENGTH(sls_due_dt) !=8 THEN NULL
			ELSE CAST(sls_due_dt AS DATE)
		END AS sls_due_dt,
		CASE 
			WHEN CAST(sls_sales AS INT) IS NULL 
			OR CAST(sls_sales AS INT) <=0 
			OR CAST(sls_sales AS INT) != CAST(sls_quantity AS INT) * ABS(CAST(sls_price AS INT))
			THEN CAST(sls_quantity AS INT) * ABS(CAST(sls_price AS INT))
			ELSE CAST(sls_sales AS INT)
		END AS sls_sales,
		CAST(sls_quantity AS INT),
		CASE 
			WHEN CAST(sls_price AS INT) IS NULL OR CAST(sls_price AS INT) <=0
			THEN CAST(sls_price AS INT)/NULLIF(CAST(sls_quantity AS INT),0)
			ELSE CAST(sls_price AS INT)
		END AS sls_price
		FROM bronze.crm_sales_details;

  RAISE NOTICE 'Batch end time: %' ,now();

  RAISE NOTICE 'Batch start time: %', now();
  RAISE NOTICE '>>> Truncating Table: silver.erp_cust_az12';
  TRUNCATE TABLE silver.erp_cust_az12;
  RAISE NOTICE '>>> Inserting records into silver.erp_cust_az12';

		insert into silver.erp_cust_az12(
		cid,
		bdate,
		gen
		)
		
		SELECT 
		case when cid like 'NAS%' THEN SUBSTRING(cid,4,length(cid))
			ELSE cid
		END as cid,
		case when cast(bdate as date) > now() then null
			else cast(bdate as date)
		END as bdate,
		CASE WHEN UPPER(TRIM(gen)) IN('F','FEMALE') then 'Female'
			WHEN UPPER(TRIM(gen)) IN('M','MALE') then 'Male'
			else 'n/a'
		end as gen
		FROM bronze.erp_cust_az12;
  
  RAISE NOTICE 'Batch end time: %',now();

  RAISE NOTICE 'Batch start time: %',now();
  RAISE NOTICE '>>> Truncating Table: silver.erp_loc_a101';
  TRUNCATE TABLE silver.erp_loc_a101;
  RAISE NOTICE '>>> Inserting records into silver.erp_loc_a101';

		insert into silver.erp_loc_a101(
		cid,
		cntry
		)
		
		SELECT 
		REPLACE(cid,'-','') as cid,
		CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
			when TRIM(cntry) IN('US','USA') THEN 'United States'
			WHEN TRIM(cntry) = '' or cntry is null then 'n/a'
			else cntry
		end as cntry
		FROM bronze.erp_loc_a101;
 
 RAISE NOTICE 'Batch end time: %' ,now();

 RAISE NOTICE 'Batch start time: %', now();
 RAISE NOTICE '>>> Truncating Table: silver.erp_px_cat_g1v2';
 TRUNCATE TABLE silver.erp_px_cat_g1v2;
 RAISE NOTICE '>>> Inserting records into silver.erp_px_cat_g1v2';

		insert  into silver.erp_px_cat_g1v2(
		id, 
		cat,
		subcat,
		maintenance
		)
		
		select 
		id, 
		cat,
		subcat,
		maintenance
		FROM bronze.erp_px_cat_g1v2;

  RAISE NOTICE 'Batch end time: %' ,v_batch_end_time;

  RAISE NOTICE 'Silver Layer refresh completed successfully.';
  RAISE NOTICE 'End Time: %',v_end_time;
  RAISE NOTICE 'Total duration: %',v_start_time - v_end_time;

EXCEPTION
  WHEN OTHERS THEN
    RAISE WARNING 'Error while refreshing Bronze Layer: %', SQLERRM;
END;
$BODY$;
ALTER PROCEDURE silver.refresh_silver_layer()
    OWNER TO postgres;
